package com.xytsz.xytsz.activity;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.view.menu.MenuWrapperFactory;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.xytsz.xytsz.R;
import com.xytsz.xytsz.adapter.ReviewAdapter;
import com.xytsz.xytsz.bean.Review;
import com.xytsz.xytsz.global.GlobalContanstant;
import com.xytsz.xytsz.net.NetUrl;
import com.xytsz.xytsz.util.JsonUtil;
import com.xytsz.xytsz.util.SpUtils;
import com.xytsz.xytsz.util.ToastUtil;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.ArrayList;
import java.util.List;

import javax.microedition.khronos.opengles.GL;


/**
 * Created by admin on 2017/1/11.
 * 审核页面
 */
public class ReviewActivity extends AppCompatActivity {

    private ListView mLv;
    private ProgressBar mProgressBar;

    private String json;
    private int personId;
    private TextView tvFail;
    private int roleId;
    private List<Review.ReviewRoad> list;
    private int size;
    private int position;
    private ReviewAdapter reviewAdapter;
    public static final int FAIL = 500;
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case FAIL:
                    mProgressBar.setVisibility(View.GONE);
                    tvFail.setText("获取数据异常");
                    break;
            }
        }
    };


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_review);
        initAcitionbar();

        personId = SpUtils.getInt(getApplicationContext(), GlobalContanstant.PERSONID);
        roleId = SpUtils.getInt(getApplicationContext(), GlobalContanstant.ROLE);
        initView();
        //获取的是所有人员的上报信息 这里显示的就是所有的道路
        initData();


    }

    private void initView() {
        mLv = (ListView) findViewById(R.id.review_lv);
        tvFail = (TextView) findViewById(R.id.tv_fail);
        mProgressBar = (ProgressBar) findViewById(R.id.review_progressbar);
    }

    private void initData() {
        mProgressBar.setVisibility(View.VISIBLE);
        GetTaskAsyn getTaskAsyn = new GetTaskAsyn();
        getTaskAsyn.execute(GlobalContanstant.GETREVIEW);


    }

    public static String getServiceData(int phaseIndication, int personId) throws Exception {

        SoapObject soapObject = new SoapObject(NetUrl.nameSpace, NetUrl.getTaskList);
        soapObject.addProperty("PhaseIndication", phaseIndication);
        soapObject.addProperty("personid", personId);
        SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapSerializationEnvelope.VER12);
        envelope.bodyOut = soapObject;//由于是发送请求，所以是设置bodyOut
        envelope.dotNet = true;
        envelope.setOutputSoapObject(soapObject);

        HttpTransportSE httpTransportSE = new HttpTransportSE(NetUrl.SERVERURL);
        httpTransportSE.call(NetUrl.getTasklist_SOAP_ACTION, envelope);

        SoapObject object = (SoapObject) envelope.bodyIn;
        String json = object.getProperty(0).toString();

        return json;
    }


    class GetTaskAsyn extends AsyncTask<Integer, Integer, String> {


        @Override
        protected String doInBackground(Integer... params) {
            try {
                json = getServiceData(params[0], personId);

            } catch (Exception e) {
                Message message = Message.obtain();
                message.what = FAIL;
                handler.sendMessage(message);
            }
            return json;
        }

        @Override
        protected void onPostExecute(String json) {
            //解析json
            if (json != null) {
                //转化成bean
                Review review = JsonUtil.jsonToBean(json, Review.class);

                list = review.getReviewRoadList();
                if (list.size() == 0) {
                    mProgressBar.setVisibility(View.GONE);
                    tvFail.setText("没有需要您审核的数据");
                } else {

                    reviewAdapter = new ReviewAdapter(list, personId);

                    mLv.setAdapter(reviewAdapter);
                    mProgressBar.setVisibility(View.GONE);


                    mLv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        @Override
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            Intent intent = new Intent(ReviewActivity.this, RoadActivity.class);
                            intent.putExtra("position", position);
                            startActivityForResult(intent, 500);
                        }
                    });
                }

            } else {
                mProgressBar.setVisibility(View.GONE);
                tvFail.setText("没有需要您审核的数据");


            }
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (resultCode) {
            case 500:
                position = data.getIntExtra("position", -1);
                int lastposition = data.getIntExtra("lastposition", -1);
                list.get(position).getList().remove(lastposition);
                size = list.get(position).getList().size();
                if (size == 0) {
                    list.remove(position);
                }
                reviewAdapter.updateAdapter(list);
                //reviewAdapter.notifyDataSetChanged();
                break;
            case 600:
                position = data.getIntExtra("position", -1);
                int failposition = data.getIntExtra("failposition", -1);
                list.get(position).getList().remove(failposition);
                size = list.get(position).getList().size();
                if (size == 0) {
                    list.remove(position);
                }

                reviewAdapter.updateAdapter(list);
                //reviewAdapter.notifyDataSetChanged();
                break;
        }
    }


    private void initAcitionbar() {
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
            actionBar.setHomeButtonEnabled(true);
            actionBar.setTitle(R.string.review);
        }
    }


    @Override
    public boolean onSupportNavigateUp() {
        finish();
        return super.onSupportNavigateUp();
    }

}
